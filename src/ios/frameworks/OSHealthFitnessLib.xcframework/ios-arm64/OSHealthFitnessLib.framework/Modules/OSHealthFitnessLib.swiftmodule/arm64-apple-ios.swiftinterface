// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSHealthFitnessLib
import BackgroundTasks
import CloudKit
import CoreData
import Foundation
import HealthKit
import NotificationCenter
@_exported import OSHealthFitnessLib
import Swift
import UIKit
import UserNotifications
import UserNotificationsUI
import _Concurrency
public enum HealthKitErrors : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case variableNotAvailable
  case variableNotAuthorized
  case operationNotAllowed
  case errorWhileReading
  case errorWhileWriting
  case variableHasWriteDenied
  case badParameterType
  case authorizationError
  case notAvailableOnDevice
  case unitNotAvailable
  case featureNotAvailableiOS13
  case backgroundJobAlreadyExists
  case featureNotAvailableiOS14
  case invalidBackgroundJobID
  case backgroundJobNotFound
  case unsubscribeError
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public func decode<T>(string: Swift.String) -> T where T : Swift.Decodable
}
extension Swift.Encodable {
  public func encode() -> Swift.String
}
open class HealthFitnessPlugin {
  public init()
  public func deleteBackgroundJobs(id: Swift.String?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func countBackgroundJobsFor(variable: Swift.String) -> Swift.Int
  public func listBackgroundJobs(completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func writeData(variable: Swift.String, value: Swift.Double, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func getLastRecord(variable: Swift.String, mostRecent: Swift.Bool, timeUnitLength: Swift.Int, completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func requestPermissions(customPermissions: Swift.String, allVariables: Swift.String, fitnessVariables: Swift.String, healthVariables: Swift.String, profileVariables: Swift.String, summaryVariables: Swift.String, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func setBackgroundJob(variable: Swift.String, timeUnit: Swift.String, timeUnitGrouping: Swift.Int, notificationFrequency: Swift.String, notificationFrequencyGrouping: Swift.Int, jobFrequency: Swift.String, condition: Swift.String, value: Swift.Double, notificationHeader: Swift.String, notificationBody: Swift.String, completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func updateBackgroundJob(id: Swift.Int64?, notificationFrequency: Swift.String?, notificationFrequencyGrouping: Swift.Int?, condition: Swift.String?, value: Swift.Double?, notificationHeader: Swift.String?, notificationBody: Swift.String?, isActive: Swift.Bool?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func advancedQuery(variable: Swift.String, startDate: Foundation.Date, endDate: Foundation.Date, timeUnit: Swift.String, operationType: Swift.String, mostRecent: Swift.Bool, onlyFilledBlocks: Swift.Bool, timeUnitLength: Swift.Int, completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
extension Foundation.Date {
  public init(_ dateString: Swift.String)
  public static func - (recent: Foundation.Date, previous: Foundation.Date) -> (year: Swift.Int?, month: Swift.Int?, week: Swift.Int?, day: Swift.Int?, hour: Swift.Int?, minute: Swift.Int?, second: Swift.Int?)
  public func startOfHour() -> Foundation.Date
  public func startOfDay() -> Foundation.Date
  public func startOfWeek() -> Foundation.Date
  public func startOfMonth() -> Foundation.Date
  public func startOfYear() -> Foundation.Date
}
public class BackgroundJobParameters : Swift.Codable {
  final public let id: Swift.Int64?
  final public let variable: Swift.String?
  final public let timeUnit: Swift.String?
  final public let timeUnitGrouping: Swift.Int?
  final public let notificationFrequency: Swift.String?
  final public let notificationFrequencyGrouping: Swift.Int?
  final public let jobFrequency: Swift.String?
  final public let condition: Swift.String?
  final public let value: Swift.Double?
  final public let notificationHeader: Swift.String?
  final public let notificationBody: Swift.String?
  final public let isActive: Swift.Bool?
  public init(id: Swift.Int64?, variable: Swift.String?, timeUnit: Swift.String?, timeUnitGrouping: Swift.Int?, notificationFrequency: Swift.String?, notificationFrequencyGrouping: Swift.Int?, jobFrequency: Swift.String?, condition: Swift.String?, value: Swift.Double?, notificationHeader: Swift.String?, notificationBody: Swift.String?, isActive: Swift.Bool?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum AdvancedQueryReturnTypeEnum : Swift.String {
  case allData, removeEmptyDataBlocks
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class QueryParameters : Swift.Codable {
  final public let variable: Swift.String?
  final public let startDate: Swift.String?, endDate: Swift.String?
  final public let timeUnit: Swift.String?, operationType: Swift.String?
  final public let timeUnitLength: Swift.Int?
  final public let advancedQueryReturnType: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class BackgroundJob : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension OSHealthFitnessLib.BackgroundJob {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OSHealthFitnessLib.BackgroundJob>
  @objc @NSManaged dynamic public var comparision: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastNotificationTimestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationFrequency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationFrequencyGrouping: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var operation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeUnit: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeUnitGrouping: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variable: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notification: OSHealthFitnessLib.Notification? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class Notification : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension OSHealthFitnessLib.Notification {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OSHealthFitnessLib.Notification>
  @objc @NSManaged dynamic public var body: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relationship: OSHealthFitnessLib.BackgroundJob? {
    @objc get
    @objc set
  }
}
extension OSHealthFitnessLib.HealthKitErrors : Swift.Equatable {}
extension OSHealthFitnessLib.HealthKitErrors : Swift.Hashable {}
extension OSHealthFitnessLib.HealthKitErrors : Swift.RawRepresentable {}
extension OSHealthFitnessLib.AdvancedQueryReturnTypeEnum : Swift.Equatable {}
extension OSHealthFitnessLib.AdvancedQueryReturnTypeEnum : Swift.Hashable {}
extension OSHealthFitnessLib.AdvancedQueryReturnTypeEnum : Swift.RawRepresentable {}
