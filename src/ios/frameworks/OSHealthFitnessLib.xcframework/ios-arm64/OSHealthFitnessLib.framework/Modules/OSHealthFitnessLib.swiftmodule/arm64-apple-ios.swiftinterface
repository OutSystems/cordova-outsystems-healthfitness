// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSHealthFitnessLib
import CloudKit
import CoreData
import Foundation
import HealthKit
import NotificationCenter
import Swift
import UserNotifications
import _Concurrency
public enum HealthKitErrors : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case variableNotAvailable
  case variableNotAuthorized
  case operationNotAllowed
  case errorWhileReading
  case errorWhileWriting
  case variableHasWriteDenied
  case badParameterType
  case authorizationError
  case notAvailableOnDevice
  case unitNotAvailable
  case backgroundJobAlreadyExists
  case invalidBackgroundJobID
  case backgroundJobNotFound
  case unsubscribeError
  case workoutTypeNotAvailable
  case workoutTypeNotAuthorized
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public func decode<T>() -> T? where T : Swift.Decodable
}
extension Swift.Encodable {
  public func encode() -> Swift.String
}
public struct VariableStruct {
  public init(allVariables: Swift.String, fitnessVariables: Swift.String, healthVariables: Swift.String, profileVariables: Swift.String, workoutVariables: Swift.String)
}
open class HealthFitnessPlugin {
  public init()
  public func deleteBackgroundJobs(id: Swift.String?, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func countBackgroundJobsFor(variable: Swift.String) -> Swift.Int
  public func listBackgroundJobs() -> Swift.String
  public func writeData(variable: Swift.String, value: Swift.Double, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func getLastRecord(variable: Swift.String, mostRecent: Swift.Bool, timeUnitLength: Swift.Int, completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func requestPermissions(customPermissions: Swift.String, variable: OSHealthFitnessLib.VariableStruct, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func setBackgroundJob(variable: Swift.String, timeUnit: (name: Swift.String, grouping: Swift.Int), notificationFrequency: (name: Swift.String, grouping: Swift.Int), jobFrequency: Swift.String, condition: Swift.String, value: Swift.Double, notificationText: (header: Swift.String, body: Swift.String), completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func updateBackgroundJob(id: Swift.Int64?, notificationFrequency: (name: Swift.String?, grouping: Swift.Int?), condition: Swift.String?, value: Swift.Double?, notificationText: (header: Swift.String?, body: Swift.String?), isActive: Swift.Bool?, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public func advancedQuery(variable: Swift.String, date: (start: Foundation.Date, end: Foundation.Date), timeUnit: Swift.String, operationType: Swift.String, mostRecent: Swift.Bool, onlyFilledBlocks: Swift.Bool, resultType: OSHealthFitnessLib.AdvancedQueryResultType = .allType, timeUnitLength: Swift.Int, completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func workoutAdvancedQuery(workoutTypeVariableDictionary: OSHealthFitnessLib.WorkoutTypeVariableDictionary, date: (start: Foundation.Date, end: Foundation.Date), completion: @escaping (Swift.Bool, Swift.String?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
public enum UInt128Errors : Swift.Error {
  case invalidString
  public static func == (a: OSHealthFitnessLib.UInt128Errors, b: OSHealthFitnessLib.UInt128Errors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UInt128 {
  public var significantBits: OSHealthFitnessLib.UInt128 {
    get
  }
  public init(upperBits: Swift.UInt64, lowerBits: Swift.UInt64)
  public init()
  public init?(_ source: Swift.String)
}
extension OSHealthFitnessLib.UInt128 : Swift.FixedWidthInteger {
  public var nonzeroBitCount: Swift.Int {
    get
  }
  public var leadingZeroBitCount: Swift.Int {
    get
  }
  public var bigEndian: OSHealthFitnessLib.UInt128 {
    get
  }
  public var littleEndian: OSHealthFitnessLib.UInt128 {
    get
  }
  public var byteSwapped: OSHealthFitnessLib.UInt128 {
    get
  }
  public init(_truncatingBits bits: Swift.UInt)
  public init(bigEndian value: OSHealthFitnessLib.UInt128)
  public init(littleEndian value: OSHealthFitnessLib.UInt128)
  public func addingReportingOverflow(_ rhs: OSHealthFitnessLib.UInt128) -> (partialValue: OSHealthFitnessLib.UInt128, overflow: Swift.Bool)
  public func subtractingReportingOverflow(_ rhs: OSHealthFitnessLib.UInt128) -> (partialValue: OSHealthFitnessLib.UInt128, overflow: Swift.Bool)
  public func multipliedReportingOverflow(by rhs: OSHealthFitnessLib.UInt128) -> (partialValue: OSHealthFitnessLib.UInt128, overflow: Swift.Bool)
  public func multipliedFullWidth(by other: OSHealthFitnessLib.UInt128) -> (high: OSHealthFitnessLib.UInt128, low: OSHealthFitnessLib.UInt128.Magnitude)
  public func dividedReportingOverflow(by rhs: OSHealthFitnessLib.UInt128) -> (partialValue: OSHealthFitnessLib.UInt128, overflow: Swift.Bool)
  public func dividingFullWidth(_ dividend: (high: OSHealthFitnessLib.UInt128, low: OSHealthFitnessLib.UInt128)) -> (quotient: OSHealthFitnessLib.UInt128, remainder: OSHealthFitnessLib.UInt128)
  public func remainderReportingOverflow(dividingBy rhs: OSHealthFitnessLib.UInt128) -> (partialValue: OSHealthFitnessLib.UInt128, overflow: Swift.Bool)
  public func quotientAndRemainder(dividingBy rhs: OSHealthFitnessLib.UInt128) -> (quotient: OSHealthFitnessLib.UInt128, remainder: OSHealthFitnessLib.UInt128)
}
extension OSHealthFitnessLib.UInt128 {
  public static var bitWidth: Swift.Int {
    get
  }
}
extension OSHealthFitnessLib.UInt128 : Swift.BinaryInteger {
  public var words: [Swift.UInt] {
    get
  }
  public var trailingZeroBitCount: Swift.Int {
    get
  }
  public init?<T>(exactly source: T) where T : Swift.BinaryFloatingPoint
  public init<T>(_ source: T) where T : Swift.BinaryFloatingPoint
  public static func / (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> OSHealthFitnessLib.UInt128
  public static func /= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func % (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> OSHealthFitnessLib.UInt128
  public static func %= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func &= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func |= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func ^= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func &>>= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func &<<= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public typealias Stride = Swift.Int
  public typealias Words = [Swift.UInt]
}
extension OSHealthFitnessLib.UInt128 : Swift.UnsignedInteger {
}
extension OSHealthFitnessLib.UInt128 : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OSHealthFitnessLib.UInt128 : Swift.Numeric {
  public static func + (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> OSHealthFitnessLib.UInt128
  public static func += (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func - (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> OSHealthFitnessLib.UInt128
  public static func -= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public static func * (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> OSHealthFitnessLib.UInt128
  public static func *= (lhs: inout OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128)
  public typealias Magnitude = OSHealthFitnessLib.UInt128
}
extension OSHealthFitnessLib.UInt128 : Swift.Equatable {
  public static func == (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> Swift.Bool
}
extension OSHealthFitnessLib.UInt128 : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension OSHealthFitnessLib.UInt128 : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension OSHealthFitnessLib.UInt128 : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension OSHealthFitnessLib.UInt128 : Swift.Comparable {
  public static func < (lhs: OSHealthFitnessLib.UInt128, rhs: OSHealthFitnessLib.UInt128) -> Swift.Bool
}
extension OSHealthFitnessLib.UInt128 : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension OSHealthFitnessLib.UInt128 {
  @available(swift, deprecated: 3.2, renamed: "init(_:)")
  public static func fromUnparsedString(_ source: Swift.String) throws -> OSHealthFitnessLib.UInt128
  @available(swift, deprecated: 5.0, renamed: "init(_:)", message: "The ExpressibleByStringLiteral conformance has been removed. Use failable initializer instead.")
  public init(stringLiteral value: Swift.StringLiteralType)
}
extension Swift.BinaryFloatingPoint {
  public init(_ value: OSHealthFitnessLib.UInt128)
  public init?(exactly value: OSHealthFitnessLib.UInt128)
}
extension Swift.String {
  public init(_ value: OSHealthFitnessLib.UInt128, radix: Swift.Int = 10, uppercase: Swift.Bool = false)
}
extension Foundation.Date {
  public struct ResultStruct {
  }
  public init(_ dateString: Swift.String)
  public static func - (recent: Foundation.Date, previous: Foundation.Date) -> Foundation.Date.ResultStruct
  public func startOfSecond() -> Foundation.Date
  public func startOfHour() -> Foundation.Date
  public func startOfDay() -> Foundation.Date
  public func startOfWeek() -> Foundation.Date
  public func startOfMonth() -> Foundation.Date
  public func startOfYear() -> Foundation.Date
}
public class BackgroundJobParameters : Swift.Codable {
  final public let id: Swift.Int64?
  final public let variable: Swift.String?
  final public let timeUnit: Swift.String?
  final public let timeUnitGrouping: Swift.Int?
  final public let notificationFrequency: Swift.String?
  final public let notificationFrequencyGrouping: Swift.Int?
  final public let jobFrequency: Swift.String?
  final public let condition: Swift.String?
  final public let value: Swift.Double?
  final public let notificationHeader: Swift.String?
  final public let notificationBody: Swift.String?
  final public let isActive: Swift.Bool?
  public init(id: Swift.Int64?, variable: Swift.String?, timeUnit: Swift.String?, timeUnitGrouping: Swift.Int?, notificationFrequency: Swift.String?, notificationFrequencyGrouping: Swift.Int?, jobFrequency: Swift.String?, condition: Swift.String?, value: Swift.Double?, notificationHeader: Swift.String?, notificationBody: Swift.String?, isActive: Swift.Bool?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum WorkoutTypeEnum : Swift.String {
  case americanFootball
  case archery
  case australianFootball
  case badminton
  case barre
  case baseball
  case basketball
  case bowling
  case boxing
  case climbing
  case coreTraining
  case crossCountrySkiing
  case crossTraining
  case curling
  case cycling
  case dance
  case danceInspiredTraining
  case discSports
  case downhillSkiing
  case elliptical
  case equestrianSports
  case fencing
  case fitnessGaming
  case fishing
  case flexibility
  case functionalStrengthTraining
  case golf
  case gymnastics
  case handball
  case handCycling
  case highIntensityIntervalTraining
  case hiking
  case hockey
  case hunting
  case jumpRope
  case kickboxing
  case lacrosse
  case martialArts
  case mindAndBody
  case mixedCardio
  case paddleSports
  case pilates
  case play
  case preparationAndRecovery
  case racquetball
  case rowing
  case rugby
  case running
  case sailing
  case skatingSports
  case snowboarding
  case snowSports
  case soccer
  case softball
  case squash
  case stairClimbing
  case stairs
  case stepTraining
  case surfingSports
  case swimming
  case tableTennis
  case taiChi
  case tennis
  case trackAndField
  case traditionalStrengthTraining
  case volleyball
  case walking
  case waterFitness
  case waterPolo
  case waterSports
  case wheelchairRunPace
  case wheelchairWalkPace
  case wrestling
  case yoga
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VariableType : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = OSHealthFitnessLib.VariableType
  public typealias Element = OSHealthFitnessLib.VariableType
  public typealias RawValue = Swift.Int
}
extension OSHealthFitnessLib.VariableType {
  public static func getVariableType(for description: Swift.String) -> OSHealthFitnessLib.VariableType?
}
public struct WorkoutType : Swift.OptionSet, Swift.Hashable {
  public let rawValue: OSHealthFitnessLib.UInt128
  public init(rawValue: OSHealthFitnessLib.UInt128)
  public typealias ArrayLiteralElement = OSHealthFitnessLib.WorkoutType
  public typealias Element = OSHealthFitnessLib.WorkoutType
  public typealias RawValue = OSHealthFitnessLib.UInt128
}
extension OSHealthFitnessLib.WorkoutType {
  public static func getWorkoutType(for description: Swift.String) -> OSHealthFitnessLib.WorkoutType?
}
public enum AdvancedQueryReturnTypeEnum : Swift.String {
  case allData
  case removeEmptyDataBlocks
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AdvancedQueryResultType : Swift.OptionSet {
  public typealias RawValue = Swift.Int
  public var rawValue: OSHealthFitnessLib.AdvancedQueryResultType.RawValue
  public init(rawValue: OSHealthFitnessLib.AdvancedQueryResultType.RawValue)
  public static let rawDataType: OSHealthFitnessLib.AdvancedQueryResultType
  public static let dataPointType: OSHealthFitnessLib.AdvancedQueryResultType
  public static let allType: OSHealthFitnessLib.AdvancedQueryResultType
  public typealias ArrayLiteralElement = OSHealthFitnessLib.AdvancedQueryResultType
  public typealias Element = OSHealthFitnessLib.AdvancedQueryResultType
}
extension OSHealthFitnessLib.AdvancedQueryResultType {
  public static func get(with description: Swift.String) -> OSHealthFitnessLib.AdvancedQueryResultType
}
@_hasMissingDesignatedInitializers public class AdvancedQueryParameters : Swift.Codable {
  final public let variable: Swift.String?
  final public let startDate: Swift.String?, endDate: Swift.String?
  final public let timeUnit: Swift.String?, operationType: Swift.String?
  final public let timeUnitLength: Swift.Int?
  final public let advancedQueryReturnType: Swift.String?
  final public let advancedQueryResultType: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class WorkoutAdvancedQueryParameters : Swift.Codable {
  final public let workoutTypeVariables: [OSHealthFitnessLib.WorkoutTypeVariableMapping]
  final public let startDate: Swift.String?
  final public let endDate: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias WorkoutTypeVariableDictionary = [OSHealthFitnessLib.WorkoutType : OSHealthFitnessLib.VariableType]
extension OSHealthFitnessLib.WorkoutAdvancedQueryParameters {
  public var workoutTypeVariableDictionary: OSHealthFitnessLib.WorkoutTypeVariableDictionary {
    get
  }
}
@_hasMissingDesignatedInitializers public class WorkoutTypeVariableMapping : Swift.Codable {
  final public let workoutType: Swift.String
  final public let variables: [Swift.String]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class BackgroundJob : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension OSHealthFitnessLib.BackgroundJob {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OSHealthFitnessLib.BackgroundJob>
  @objc @NSManaged dynamic public var comparision: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastNotificationTimestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationFrequency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationFrequencyGrouping: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var operation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeUnit: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeUnitGrouping: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variable: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notification: OSHealthFitnessLib.Notification? {
    @objc get
    @objc set
  }
}
extension OSHealthFitnessLib.BackgroundJob : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
@objc @_inheritsConvenienceInitializers public class Notification : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension OSHealthFitnessLib.Notification {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OSHealthFitnessLib.Notification>
  @objc @NSManaged dynamic public var body: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relationship: OSHealthFitnessLib.BackgroundJob? {
    @objc get
    @objc set
  }
}
extension OSHealthFitnessLib.Notification : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
extension OSHealthFitnessLib.HealthKitErrors : Swift.Equatable {}
extension OSHealthFitnessLib.HealthKitErrors : Swift.Hashable {}
extension OSHealthFitnessLib.HealthKitErrors : Swift.RawRepresentable {}
extension OSHealthFitnessLib.UInt128Errors : Swift.Equatable {}
extension OSHealthFitnessLib.UInt128Errors : Swift.Hashable {}
extension OSHealthFitnessLib.WorkoutTypeEnum : Swift.Equatable {}
extension OSHealthFitnessLib.WorkoutTypeEnum : Swift.Hashable {}
extension OSHealthFitnessLib.WorkoutTypeEnum : Swift.RawRepresentable {}
extension OSHealthFitnessLib.AdvancedQueryReturnTypeEnum : Swift.Equatable {}
extension OSHealthFitnessLib.AdvancedQueryReturnTypeEnum : Swift.Hashable {}
extension OSHealthFitnessLib.AdvancedQueryReturnTypeEnum : Swift.RawRepresentable {}
